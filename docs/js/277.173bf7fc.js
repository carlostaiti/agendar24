(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[277],{"6fdd":function(e,l,a){"use strict";a.r(l),l["default"]="<template>\n  <div style=\"max-width: 800px; width: 100%;\">\n    <q-toolbar class=\"text-primary row justify-between items-center\">\n      <q-btn-group flat class=\"col-3\">\n        <q-btn color=\"primary\" flat label=\"Prev\" @click=\"onPrev\" />\n        <q-btn color=\"primary\" flat label=\"Next\" @click=\"onNext\" />\n      </q-btn-group>\n\n      <div class=\"col-4\" style=\"text-align: center;\">\n      {{ title }}\n      </div>\n\n      <q-select\n        outlined\n        dense\n        emit-value\n        map-options\n        label=\"Change locale\"\n        v-model=\"locale\"\n        :options=\"locales\"\n        class=\"col-4\"\n      ></q-select>\n\n    </q-toolbar>\n    <q-separator class=\"full-width\" />\n    <q-calendar\n      ref=\"calendar\"\n      v-model=\"selectedDate\"\n      view=\"month\"\n      :locale=\"locale\"\n      :short-weekday-label=\"shortWeekdayLabel\"\n      :short-month-label=\"shortMonthLabel\"\n      @change=\"onChange\"\n    />\n  </div>\n</template>\n\n<script>\n// normally you would not import \"all\" of QCalendar, but is needed for this example to work with UMD (codepen)\nimport QCalendar from 'ui' // ui is aliased from '@quasar/quasar-ui-qcalendar'\n\nexport default {\n  data () {\n    return {\n      selectedDate: '',\n      title: '',\n      shortWeekdayLabel: false,\n      shortMonthLabel: false,\n      dateFormatter: undefined,\n      start: undefined,\n      locale: 'en-us',\n      locales: [\n        { value: 'ar', label: 'العربية' },\n        { value: 'bg', label: 'български език' },\n        { value: 'ca', label: 'Català' },\n        { value: 'cs', label: 'Čeština' },\n        { value: 'da', label: 'Dansk' },\n        { value: 'de', label: 'Deutsch' },\n        { value: 'en-gb', label: 'English (UK)' },\n        { value: 'en-us', label: 'English (US)' },\n        { value: 'eo', label: 'Esperanto' },\n        { value: 'es', label: 'Español' },\n        { value: 'fa-ir', label: 'فارسی' },\n        { value: 'fi', label: 'Suomi' },\n        { value: 'fr', label: 'Français' },\n        { value: 'gn', label: 'Avañe\\'ẽ' },\n        { value: 'he', label: 'עברית' },\n        { value: 'hr', label: 'Hrvatski jezik' },\n        { value: 'hu', label: 'Magyar' },\n        { value: 'id', label: 'Bahasa Indonesia' },\n        { value: 'it', label: 'Italiano' },\n        { value: 'ja', label: '日本語 (にほんご)' },\n        { value: 'km', label: 'ខ្មែរ' },\n        { value: 'ko-kr', label: '한국어' },\n        { value: 'lu', label: 'Kiluba' },\n        { value: 'lv', label: 'Latviešu valoda' },\n        { value: 'ml', label: 'മലയാളം' },\n        { value: 'ms', label: 'Bahasa Melayu' },\n        { value: 'nb-no', label: 'Norsk' },\n        { value: 'nl', label: 'Nederlands' },\n        { value: 'pl', label: 'Polski' },\n        { value: 'pt-br', label: 'Português (BR)' },\n        { value: 'pt', label: 'Português' },\n        { value: 'ro', label: 'Română' },\n        { value: 'ru', label: 'русский' },\n        { value: 'sk', label: 'Slovenčina' },\n        { value: 'sl', label: 'Slovenski Jezik' },\n        { value: 'sr', label: 'српски језик' },\n        { value: 'sv', label: 'Svenska' },\n        { value: 'ta', label: 'தமிழ்' },\n        { value: 'th', label: 'ไทย' },\n        { value: 'tr', label: 'Türkçe' },\n        { value: 'uk', label: 'Українська' },\n        { value: 'vi', label: 'Tiếng Việt' },\n        { value: 'zh-hans', label: '中文(简体)' },\n        { value: 'zh-hant', label: '中文(繁體)' }\n      ]\n    }\n  },\n\n  beforeMount () {\n    this.updateFormatter()\n  },\n\n  watch: {\n    locale () {\n      this.updateFormatter()\n      this.updateTitle()\n    }\n  },\n\n  methods: {\n    onChange ({ start }) {\n      this.start = start\n      this.updateTitle()\n    },\n\n    onPrev () {\n      this.$refs.calendar.prev()\n    },\n\n    onNext () {\n      this.$refs.calendar.next()\n    },\n\n    updateTitle () {\n      const myDate = QCalendar.makeDate(this.start)\n      if (this.dateFormatter !== undefined) {\n        this.title = this.dateFormatter.format(myDate)\n      }\n    },\n\n    updateFormatter () {\n      try {\n        this.dateFormatter = new Intl.DateTimeFormat(this.locale || undefined, {\n          month: this.shortMonthLabel ? 'short' : 'long',\n          year: 'numeric',\n          timeZone: 'UTC'\n        })\n      }\n      catch (e) {\n        // console.error('Intl.DateTimeFormat not supported')\n        this.dateFormatter = undefined\n      }\n    }\n  }\n}\n<\/script>\n"}}]);